import { interpret, Machine, SendFunction } from "robot3";
import { Readable, writable } from "svelte/store";

export interface SvelteRobot<Context, EventType extends string, State extends string> {
	context: Readable<Context>;
	send: SendFunction<EventType>;
	state: Readable<State>;
}

export const svelteRobot = <State extends string, Context, EventType extends string = string>(machine: Machine<State, Context>): SvelteRobot<Context, EventType, State> => {
	const { set: setState, ...state } = writable(machine.current as State);
	const { set: setContext, ...context } = writable((machine.context as unknown as () => Context)());

	const { send } = interpret(machine, (service) => {
		setState(service.machine.current as State);
		setContext(service.context);
	});

	return { context, send, state };
};
