// import { createPopper } from '@popperjs/core/lib/popper-lite';
import { createPopper } from '@popperjs/core';
import { writable } from "svelte/store";
import { v4 } from "uuid";

import type { Options } from '@popperjs/core';

export const tooltip = (node: HTMLElement, options: Options) => {
	const id = v4();

	const title = node.getAttribute("title");
	node.setAttribute("aria-describedby", id);

	const popup = document.createElement("div");
	popup.setAttribute("role", "tooltip");
	popup.textContent = title;
	popup.id = id;
	popup.style.visibility = "hidden";

	popup.classList.add("bg-green-100", "text-green-900", "p-4", "rounded-full");

	node.parentNode?.insertBefore(popup, node.nextSibling);

	const instance = createPopper(node, popup, {
		...(options ?? {}),
		modifiers: [
			{
				name: 'preventOverflow',
				options: {
					altAxis: true,
				},
			},
		],
	});

	node.removeAttribute("title");

	const initialState = { focused: false, hovered: false, childFocused: false, childHovered: false };
	const state = writable(initialState);
	const updater = (partialState: Partial<typeof initialState>) => () => state.update($state => ({ ...$state, ...partialState }));

	const setFocused = updater({ focused: true });
	const clearFocused = updater({ focused: false });
	const setHovered = updater({ hovered: true });
	const clearHovered = updater({ hovered: false });

	const setChildFocused = updater({ childFocused: true });
	const clearChildFocused = updater({ childFocused: false });
	const setChildHovered = updater({ childHovered: true });
	const clearChildHovered = updater({ childHovered: false });

	const unsubscribeInteractivity = state.subscribe(($state) => {
		if (Object.values($state).some((value) => value)) popup.style.visibility = "visible";
		else popup.style.visibility = "hidden";
	});

	node.addEventListener("focus", setFocused);
	node.addEventListener("blur", clearFocused);
	node.addEventListener("mouseover", setHovered);
	node.addEventListener("mouseout", clearHovered);

	popup.addEventListener("focus", setChildFocused);
	popup.addEventListener("blur", clearChildFocused);
	popup.addEventListener("mouseover", setChildHovered);
	popup.addEventListener("mouseout", clearChildHovered);

	return {
		update(newOptions: Options) { instance.setOptions(newOptions) },
		destroy() {
			node.removeEventListener("focus", setFocused);
			node.removeEventListener("blur", clearFocused);
			node.removeEventListener("mouseover", setHovered);
			node.removeEventListener("mouseout", clearHovered);

			popup.removeEventListener("focus", setChildFocused);
			popup.removeEventListener("blur", clearChildFocused);
			popup.removeEventListener("mouseover", setChildHovered);
			popup.removeEventListener("mouseout", clearChildHovered);

			unsubscribeInteractivity();

			instance.destroy();
		},
	}
}
